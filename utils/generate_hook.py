HOOK = f'''#!/usr/bin/env python3
"""
Simple pre-commit hook - calls back to Code Analyzer
Generated by Code Analyzer git integration
"""

import sys
import subprocess
from pathlib import Path

def find_python():
    """Find the correct Python command."""
    import shutil
    for cmd in ['python3', 'python', 'py']:
        if shutil.which(cmd):
            return cmd
    return 'python3'

def main():
    # Find project root and main.py
    project_root = Path(__file__).parent.parent.parent
    main_py = project_root / "main.py"
    
    if not main_py.exists():
        print("⚠️  main.py not found - skipping analysis")
        return 0
    
    # Get Python command
    python_cmd = find_python()
    
    # Call the analyzer with pre-commit mode
    try:
        cmd = [python_cmd, str(main_py), "--pre-commit", str(project_root)]
        result = subprocess.run(cmd, timeout=60)
        return result.returncode
    except Exception as e:
        print(f"⚠️  Hook failed: {{e}}")
        return 0  # Don't block on hook failure

if __name__ == '__main__':
    sys.exit(main())
'''

